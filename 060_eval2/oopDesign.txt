Program Structure:
	*** Must compile the program for each step (work as described) ***
	functions:
		* prints a random story to stdout
		* generates a story
	inputs:
		* story template: "_blank_" to indicate word replacement
		* list of words: "category:word"
	4steps:
		1) parsing story template
		2) store the list of words into a data structure
		3) combine 1) and 2) to generate a random story
		4) adds option of not reusing words

provided.h:
	*** Implementation provided by "provided.o" file ***
	structs:
		* category_t:
			* category name
			* array of words for that category
		* catarray_t:
			* array of category_t
			functions:
				- const char * chooseWord(char * category, catarray_t * cats);
				  	* Select a word in "cats" given the "category"
					* returns a pointer to the string in "cats" (no new memory)
					* if "cats" == NULL, return "cat"
					* if "category" DNE in "csts" or no words, EXIT_FAILURE

				- void printWords(catarray_t * cats);
				       * prints out "cats" for testing
				       
story-step1:
	inputs:
		* one command line argument: name of story template file
	functions:
		* parse the reading template by replacing "_blank_" with "cat"
		  * call "chooseWord" to get the string literal "cat"
		  * if a '_' blank begins, must have a matching '_'. Otherwise, EXIT_FAILURE
		  
		
					
		
